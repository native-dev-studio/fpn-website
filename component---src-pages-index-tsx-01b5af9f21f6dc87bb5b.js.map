{"version":3,"file":"component---src-pages-index-tsx-01b5af9f21f6dc87bb5b.js","mappings":"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","sources":["webpack://dream-fight/./node_modules/camelcase/index.js","webpack://dream-fight/../src/image-utils.ts","webpack://dream-fight/../src/components/hooks.ts","webpack://dream-fight/../src/components/picture.tsx","webpack://dream-fight/../src/components/layout-wrapper.tsx","webpack://dream-fight/../src/components/placeholder.tsx","webpack://dream-fight/../src/components/main-image.tsx","webpack://dream-fight/../src/components/gatsby-image.browser.tsx","webpack://dream-fight/../src/components/gatsby-image.server.tsx","webpack://dream-fight/../src/components/static-image.server.tsx","webpack://dream-fight/../src/components/static-image.tsx","webpack://dream-fight/./src/components/DreamFightLogo.tsx","webpack://dream-fight/./src/components/HeroImage.tsx","webpack://dream-fight/./src/pages/index.tsx"],"sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n  return string;\n};\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n  if (input.length === 0) {\n    return '';\n  }\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n  var hasUpperCase = input !== input.toLowerCase();\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        document.addEventListener(`load`, function onLoadListener() {\n          document.removeEventListener(`load`, onLoadListener)\n\n          onStartLoad?.({\n            wasCached: true,\n          })\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import * as React from \"react\"\n\nconst DreamFightLogo = (props: any) => {\n  return (\n    <svg {...props} width=\"200\" height=\"90\" viewBox=\"0 0 433 98\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M73.9314 24.5594C73.9314 16.764 66.0404 8.60719 60.9234 6.18688C58.412 5.0188 53.2999 4.57334 46.7514 4.57334C44.9582 4.57334 42.9817 4.57333 41.0102 4.66242C38.9496 2.33121 35.7199 0 33.9217 0C32.8468 0 31.4995 1.61354 28.9682 5.64738C14.7912 7.4391 0.79751 10.6662 0.79751 13.5369C0.79751 17.2094 10.5758 23.035 13.8055 23.035C15.8181 22.9924 17.8256 22.8138 19.8141 22.5004C10.4866 40.9621 0 64.7147 0 69.2831C0 71.7034 3.96281 77.0835 6.54855 77.0835C6.82099 77.0835 7.17765 76.9945 7.17765 76.6332C7.04813 75.9227 6.95884 75.2055 6.91018 74.4851C6.91018 72.6933 8.16342 69.5356 11.2148 63.2794C14.5337 68.7486 22.068 75.2918 29.5131 75.2918C36.8691 75.2918 48.3365 66.8777 58.6696 54.5039C67.1896 44.2881 72.6633 31.6521 73.7382 26.8114C73.8918 26.0711 73.9566 25.3151 73.9314 24.5594V24.5594ZM49.352 47.2381C40.292 58.8001 30.6029 66.0462 25.1342 66.0462C21.7262 66.0462 17.2383 60.3097 14.9051 56.8995C21.0971 44.9811 29.1713 30.3701 35.8982 19.8821C41.2356 18.9992 46.6322 18.521 52.0417 18.4517C56.3513 18.4517 59.9377 18.8972 60.7451 20.1544C61.0413 20.67 61.1677 21.2656 61.1067 21.857C61.1067 26.5293 56.6188 37.9132 49.352 47.2381Z\" fill=\"#E64FDC\"/>\n      <path d=\"M223.201 42.4861C222.933 42.4861 222.755 42.6643 222.483 43.0206C220.868 45.2628 212.08 56.1071 209.48 59.0669C207.492 61.434 205.365 63.6801 203.109 65.7933C202.391 66.511 201.584 67.0505 200.955 67.0505C200.42 67.0505 199.964 66.6001 199.964 65.526C199.964 64.6302 200.231 63.373 200.955 61.4031C202.124 58.0869 208.851 50.4696 211.629 46.7921C212.327 45.9284 212.707 44.8528 212.709 43.7433C212.709 40.5162 208.94 38.1008 205.621 37.8039C203.288 38.6997 197.279 46.1388 192.435 52.1574C192.012 52.3601 191.555 52.481 191.087 52.5138C191.051 52.5187 191.014 52.5151 190.979 52.5034C190.945 52.4917 190.913 52.4722 190.887 52.4463C190.861 52.4205 190.842 52.389 190.83 52.3543C190.818 52.3197 190.815 52.2828 190.82 52.2465C190.82 51.7961 191.449 50.9002 192.975 48.1236C193.319 47.4928 193.474 46.7761 193.42 46.0596C193.42 43.1939 191.439 39.4273 189.116 39.4273C188.593 39.4577 188.092 39.6459 187.679 39.9668C183.013 43.4611 172.323 56.4585 170.456 56.4585C170.367 56.4585 170.277 56.3695 170.277 56.1863C170.277 54.6668 178.981 43.4612 181.309 41.4912C182.656 40.4123 183.107 39.3382 183.107 38.3532C183.107 35.5716 179.144 32.9731 176.915 32.9731C171.541 32.9731 162.575 51.4744 158.701 62.982L158.523 62.9127C157.631 63.9026 154.065 67.3029 152.157 67.3029C151.622 67.2899 151.114 67.0663 150.743 66.6807C150.372 66.2951 150.168 65.7788 150.176 65.2439C150.176 61.8337 156.616 51.7961 158.597 49.1976C158.968 48.7624 159.216 48.2361 159.315 47.6732C159.315 45.7924 156.086 43.9115 152.227 43.9115C151.225 43.8974 150.225 44.0173 149.255 44.2679C147.64 52.6029 138.045 70.2627 132.66 70.2627C132.031 70.2627 131.764 69.545 131.764 68.3769C131.764 62.0168 139.749 42.4762 152.846 42.4762C154.308 42.5094 155.757 42.7511 157.151 43.1939C157.473 43.289 157.806 43.3487 158.141 43.3721C159.667 43.3721 161.113 40.5954 161.113 37.6356C161.113 34.4085 159.409 31.0032 154.203 31.0032C143.261 31.0032 133.497 43.2879 128.589 55.2855C127.256 56.8941 126.112 58.2552 125.408 59.057C119.4 65.9566 112.311 72.4999 106.124 72.4999C104.143 72.4999 103.251 71.3367 103.251 69.3668C103.257 68.1362 103.348 66.9074 103.524 65.6893C111.236 61.6555 129.282 49.7371 129.282 45.431C129.282 40.8626 125.874 40.4122 124.081 39.2491C121.386 37.4574 120.851 32.7059 117.8 32.7059C110.231 32.7059 100.898 44.6787 97.0594 56.3249C96.1033 57.4732 95.286 58.4433 94.7461 59.057C91.1548 63.18 86.3251 68.1097 85.4136 68.9164C84.7003 69.6341 83.8879 70.1736 83.2638 70.1736C82.7238 70.1736 82.2731 69.7232 82.2731 68.6492C82.2731 62.7098 91.5114 51.8209 94.5578 47.7623C95.3653 46.5991 95.7269 45.7033 95.7269 44.8965C95.7269 41.4913 89.1783 41.0408 86.6668 39.16C86.8452 39.16 88.2817 35.9329 88.2817 33.3345C88.2817 31.5427 87.5634 29.9292 85.2303 29.9292C77.5177 30.0183 71.1475 35.3044 71.1475 39.9668C71.1475 42.4762 72.8515 44.8074 77.0917 46.1487C75.566 48.0345 73.2378 51.1675 72.2471 52.3356C71.4397 53.3255 71.1722 54.1273 71.1722 54.5777C71.1722 55.4736 72.1629 55.6518 72.9654 55.6518C73.2663 55.6479 73.5662 55.6181 73.862 55.5627C77.0025 51.3507 78.8155 48.6334 79.9647 46.7773C80.8244 46.945 81.6925 47.0656 82.5653 47.1386C79.0681 54.0382 73.7728 66.1398 73.7728 73.2176C73.7728 76.5337 74.9419 78.6868 77.9883 78.6868C82.9715 78.6868 90.808 70.4013 95.3603 64.6302C95.3256 65.1251 95.3058 65.6448 95.3058 66.1398C95.3058 72.9503 103.826 78.0582 107.234 78.0582C112.316 78.0681 119.747 72.2771 125.691 64.9865C125.401 66.5526 125.247 68.1407 125.23 69.7331C125.23 73.9451 128.911 76.4545 132.854 76.4545C135.276 76.4545 139.402 73.6779 143.256 69.2827C143.523 72.782 145.317 74.4846 148.011 74.4846C150.528 74.4846 153.797 72.8067 156.928 69.4114C156.849 69.8727 156.804 70.3392 156.794 70.8071C156.794 74.841 161.099 78.2314 163.164 78.2314C164.155 78.2314 164.868 77.6969 165.314 76.4397C166.751 72.3168 176.885 56.0032 180.744 56.0032C180.876 55.9985 181.008 56.0202 181.131 56.0669C181.254 56.1137 181.367 56.1845 181.463 56.2754C181.463 56.2754 175.721 65.2389 175.721 70.9754C175.721 73.3908 179.129 75.1874 181.73 75.1874C182.983 75.1874 184.063 74.7371 184.42 73.7521C189.591 61.1259 193.509 57.3791 194.049 57.3791L194.139 57.4682C192.786 60.4234 192.053 63.6236 191.984 66.8723C191.984 71.7129 194.139 74.94 197.547 74.94C201.138 74.94 206.25 71.3565 211.719 62.4821C216.836 55.5825 222.121 48.0543 224.548 44.1986C224.548 44.1887 224.008 42.4861 223.201 42.4861ZM120.242 43.9214C120.548 43.9377 120.85 43.9977 121.138 44.0996C119.434 47.5049 116.026 53.0632 105.084 60.5023C107.932 52.7019 113.941 45.4409 120.242 43.9214Z\" fill=\"#E64FDC\"/>\n        <path d=\"M277.026 40.0562C273.974 37.814 259.981 37.9031 254.239 37.9031C258.202 31.1817 262.046 24.8166 265.182 19.981L267.069 19.7978C270.041 19.5306 272.632 19.7087 275.049 19.6197C281.791 19.5585 288.522 20.1586 295.146 21.4114C296.761 21.4114 299.005 14.0614 299.005 9.84934C299.005 8.68621 298.732 7.79035 298.286 7.70126C291.738 6.08772 283.307 5.18691 268.595 5.09782C266.529 3.11801 263.929 1.42529 262.403 1.42529C261.506 1.42529 260.521 2.23205 258.638 5.1869C250.609 5.41518 242.605 6.1941 234.683 7.51813C233.97 7.70126 232.702 8.59711 232.702 9.58207C232.708 9.80317 232.769 10.0193 232.88 10.2107C233.509 11.3738 235.302 22.3963 237.833 22.6686C238.186 22.746 238.548 22.7759 238.908 22.7576C241.063 22.7576 244.56 22.2182 249.227 21.5005C239.622 39.7048 228.229 64.3533 228.229 69.1048C228.229 71.6142 233.519 77.0834 235.58 77.0834C235.941 77.0834 236.298 76.9052 236.298 76.5439C236.164 75.8908 236.075 75.2293 236.03 74.5641C236.03 72.322 240.424 62.5516 247.963 49.0197C251.996 47.228 263.319 45.9708 270.75 45.9708C273.35 45.9708 275.505 46.5103 276.694 46.5103C277.501 46.5103 277.774 44.8968 277.774 43.3723C277.774 41.8479 277.472 40.3333 277.026 40.0562Z\" fill=\"#E64FDC\"/>\n      <path d=\"M306.088 29.0437C308.51 29.0437 311.74 23.6636 311.74 21.3324C311.74 19.0011 308.693 14.9673 304.656 14.9673C301.154 14.9673 297.479 20.1692 297.479 23.3072C297.479 26.0839 303.026 29.0437 306.088 29.0437Z\" fill=\"#E64FDC\"/>\n      <path d=\"M292.624 76.1874C292.577 75.802 292.386 75.4485 292.089 75.1975C291.089 74.2959 290.298 73.187 289.771 71.9483C289.244 70.7096 288.993 69.3709 289.038 68.0257C289.038 59.8689 304.195 39.076 304.195 34.6809C304.195 32.0824 302.046 31.1865 299.445 31.1865C297.919 31.1865 290.831 32.1764 290.831 34.1562C290.831 34.7848 291.46 35.4976 291.46 36.3043C291.46 39.7096 280.518 58.3543 280.518 66.0657C280.518 76.2814 284.733 79.4293 288.141 79.4293C290.573 79.4145 292.624 77.89 292.624 76.1874Z\" fill=\"#E64FDC\"/>\n      <path d=\"M345.378 82.8199L341.074 82.1913C327.437 80.3105 322.954 79.6819 314.612 79.5038C320.532 67.3131 325.733 57.5428 331.117 49.3118C331.49 48.8779 331.738 48.351 331.836 47.7873C331.836 45.9065 328.338 43.9366 324.301 43.9366C323.299 43.922 322.299 44.0418 321.329 44.293C319.714 52.6279 310.114 70.2878 304.735 70.2878C304.106 70.2878 303.838 69.5701 303.838 68.402C303.838 62.0419 311.818 42.5013 324.915 42.5013C327.61 42.5013 329.314 43.3971 330.211 43.3971C331.736 43.3971 333.183 40.6205 333.183 37.6607C333.183 34.4336 331.479 31.0283 326.278 31.0283C310.58 31.0283 297.304 56.3054 297.304 69.7483C297.304 73.9603 300.98 76.4697 304.928 76.4697C306.229 76.371 307.474 75.904 308.519 75.1234L306.632 79.5186C293.896 79.6077 285.555 82.2062 285.555 89.5562C285.555 94.575 290.305 97.8911 295.957 97.8911C301.342 97.8911 307.529 94.8423 312.373 84.3592C321.611 85.166 327.263 87.1359 334.887 87.5863C335.967 87.6754 336.868 87.6754 337.582 87.6754C342.694 87.6754 339.286 86.1509 343.323 85.7896C345.834 84.3592 347.627 83.7306 347.627 83.3743C347.608 83.1763 346.993 82.9981 345.378 82.8199ZM302.679 88.1951C301.069 91.6944 299.004 92.9466 297.23 92.9466C296.184 92.9193 295.192 92.4799 294.469 91.7243C293.746 90.9686 293.351 89.9579 293.371 88.9128C293.371 85.3293 297.765 83.9633 304.314 83.9633H304.675L302.679 88.1951Z\" fill=\"#E64FDC\"/>\n      <path d=\"M428.09 18.1946C421.992 18.1946 413.021 18.5559 403.689 18.8232C404.585 17.3878 405.487 16.1356 406.2 15.0615C406.609 14.4175 406.827 13.6711 406.829 12.9085C406.829 9.85962 402.436 6.54346 399.746 6.54346C398.22 6.54346 396.244 6.99385 395.436 9.05284C394.718 11.0326 392.925 14.6111 390.483 19.0905C385.732 19.0905 381.155 18.9123 377.297 18.5559C376.762 18.5559 376.132 19.9912 376.132 21.783C376.132 24.4705 377.569 27.7867 383.31 27.7867H385.822C381.784 35.4436 377.282 44.0805 373.839 51.5691C371.323 54.6675 368.806 57.7065 367.607 59.0676C361.866 65.789 356.398 70.9909 353.886 70.9909C352.99 70.9909 352.539 70.3624 352.539 68.927C352.539 62.9876 364.378 51.8067 367.429 47.7728C368.113 46.9324 368.493 45.8862 368.509 44.8031C368.509 41.1256 362.946 38.9775 360.435 38.9775C360.127 38.9748 359.822 39.0355 359.538 39.1557C356.308 41.1355 347.783 48.2084 341.507 57.9638C341.507 57.9638 341.057 57.5134 341.057 57.2462C341.166 56.4783 341.441 55.7436 341.864 55.0931C346.619 46.0405 361.331 26.881 361.331 15.9921C361.331 10.0774 358.191 8.36982 354.892 8.36982C352.608 8.44215 350.371 9.02568 348.343 10.0774C347.625 10.4338 347.352 10.7901 347.352 11.1514C347.352 11.5128 347.62 11.8691 347.887 12.4928C348.939 14.4468 349.464 16.64 349.413 18.8578C349.413 32.0334 333.805 50.7673 325.463 70.6643C325.298 71.0635 325.207 71.4896 325.195 71.9214C325.195 75.4158 330.644 78.1034 332.011 78.1034C333.002 78.1034 333.715 77.5688 334.166 76.3116C335.692 71.9214 346.902 50.5742 353.812 49.421C349.849 57.3996 345.287 67.8876 345.287 73.8913C345.287 77.747 346.813 79.3358 349.056 79.3358C354.124 79.3358 363.209 71.4463 369.089 63.4627C368.611 64.9154 368.33 66.425 368.251 67.9519C368.251 71.9858 373.096 76.4651 376.866 76.4651C377.713 76.4726 378.537 76.1876 379.199 75.6583C382.696 72.8816 388.526 66.3384 391.399 62.3936C396.422 55.494 401.802 47.9658 404.224 44.1102C404.224 44.1102 403.684 42.4076 402.881 42.4076C402.609 42.4076 402.431 42.5857 402.158 42.9421C400.543 45.1842 391.756 56.0286 389.155 58.9884C386.296 62.6075 382.91 65.7775 379.109 68.3924C377.94 69.1101 377.044 69.4714 376.504 69.4714C375.786 69.4714 375.513 68.932 375.513 68.0361C375.513 62.9282 388.254 42.4026 397.849 27.6135C411.124 27.2522 427.362 26.2672 427.362 22.9511C427.362 22.2334 426.465 21.877 426.465 21.5206C426.465 21.3375 426.733 21.1593 427.723 21.0703C430.235 19.6349 432.028 19.0063 432.028 18.6499C432.038 18.5559 431.409 18.3777 428.09 18.1946Z\" fill=\"#E64FDC\"/>\n    </svg>\n  )\n}\n\nexport default DreamFightLogo;\n","import * as React from \"react\"\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\n\nconst HeroImage = (props: any) => {\n  const data = useStaticQuery(graphql`\n    query {\n      hero: file(relativePath: { eq: \"hero.png\" }) {\n        childImageSharp {\n          gatsbyImageData(\n            placeholder: BLURRED\n            formats: [AUTO, WEBP, AVIF]\n          )\n        }\n      }\n    }\n  `);\n  const image = getImage(data.hero);\n\n  return (\n      /* @ts-ignore: Type 'undefined' is not assignable */\n      <GatsbyImage {...props} image={image}\n        imgStyle={{ \n          objectFit: 'contain',\n          objectPosition: 'left top'\n        }} \n        alt=\"A tennis player in a game\"\n      />\n  );\n};\n\nexport default HeroImage;\n","import * as React from \"react\"\n\nimport { Link } from 'gatsby';\nimport DreamFightLogo from '../components/DreamFightLogo';\nimport HeroImage from '../components/HeroImage';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\n\nconst IndexPage = () => {\n  return (\n    <section className=\"\n      flex flex-col justify-center items-center \n      md:flex-row md:items-start\n    \">\n      <main className=\"max-w-lg mb-10 px-10\">\n        <DreamFightLogo className='my-5'/>\n        <h1 className=\"\n          mt-4 sm:mt-8 2xl:mt-16 \n          mb-8 \n          italic tracking-tight font-extrabold\n        \">\n          Get in the game\n        </h1>\n        <p className=\"\n          my-3 sm:mt-5 md:mt-5 lg:mx-0\n        \">\n          DreamFight is a new type of sports game augmented over live broadcast. We're bringing back the magic of sports and gaming.\n        </p>\n        <div className=\"mt-5 sm:mt-8 sm:flex sm:justify-center justify-start\">\n          <div className=\"w-full\">\n            <div className='\n              text-lg\n              my-3 font-semibold\n            '>\n              Sign up for early access\n            </div>\n            <div className='flex flex-col sm:flex-row sm:space-x-4 w-3xl font-large'>\n              <input type=\"text\" \n                className=\"\n                  py-3 mb-3 text-black sm:mb-0 focus:ring-red focus:border-red flex-1 block w-full rounded text-lg px-3\n                \"\n                placeholder=\"Enter your email\"\n              />\n              { /* @ts-ignore */}\n              <Link to='#' className='\n                px-8 py-3 whitespace-nowrap bg-purple rounded\n                text-lg sm:text-md'\n              >\n                Sign up\n              </Link>\n            </div>\n          </div>\n        </div>\n        <div className='mt-5 sm:mt-10 text-gray-600 italic text-sm'>\n          © 2022 DreamFight Inc. All rights reserved.\n        </div>\n      </main>\n      <HeroImage className=\"max-w-full sm:max-w-[40%] h-screen\" />\n    </section>\n  )\n}\n\nexport default IndexPage\n"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","height","hasNativeLazyLoadSupport","HTMLImageElement","prototype","getImage","node","Boolean","images","_node$images","fallback","_node$images$fallback","src","gatsbyImageData","gatsbyImage","childImageSharp","_node$childImageSharp","format","getMainProps","isLoading","isLoaded","loading","style","shouldLoad","opacity","getPlaceholderProps","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","result","transition","output","fallbackImage","Sizer","React","paddingTop","maxWidth","display","alt","role","LayoutWrapper","a","children","props","Fragment","Image","t","srcSet","decoding","undefined","Picture","sources","sizes","media","type","key","propTypes","PropTypes","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","Error","MainImage","renderImageToStringPromise","renderImage","altValidator","rest","image","imageCache","Set","GatsbyImageHydrator","e","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","wStyle","wClass","wrapperProps","root","useRef","cacheKey","useMemo","JSON","stringify","sizer","useEffect","import","then","renderImageToString","swapPlaceholderImage","animationFrame","cleanupCallback","ssrImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","document","addEventListener","onLoadListener","removeEventListener","add","has","innerHTML","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","createElement","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","GatsbyImage","memo","warn","checkDimensionProps","validLayouts","StaticImage","GatsbyImageBrowser","__error","imageData","__imageData","console","viewBox","fill","xmlns","d","data","useStaticQuery","hero","imgStyle","DreamFightLogo","Link","to","HeroImage"],"sourceRoot":""}